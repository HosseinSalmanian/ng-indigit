{"version":3,"file":"ng-indigit.mjs","sources":["../../../projects/ng-indigit/src/lib/utils/_basic.util.ts","../../../projects/ng-indigit/src/lib/utils/_number.util.ts","../../../projects/ng-indigit/src/lib/utils/_digit-group.util.ts","../../../projects/ng-indigit/src/lib/utils/_float.util.ts","../../../projects/ng-indigit/src/lib/utils/_pretty-float.util.ts","../../../projects/ng-indigit/src/lib/helpers/default-config.ts","../../../projects/ng-indigit/src/lib/type-predicates/_digit-group-config.type-predicate.ts","../../../projects/ng-indigit/src/lib/type-predicates/_pretty-float-decimal-option-object.type-predicate.ts","../../../projects/ng-indigit/src/lib/type-predicates/_character.type-predicate.ts","../../../projects/ng-indigit/src/lib/type-predicates/_pretty-float-digit-group-option-object.type-predicate.ts","../../../projects/ng-indigit/src/lib/utils/_pretty-float-param.util.ts","../../../projects/ng-indigit/src/lib/classes/PrettyFloat/pretty-float.class.ts","../../../projects/ng-indigit/src/lib/indigit.directive.ts","../../../projects/ng-indigit/src/lib/ng-indigit.module.ts","../../../projects/ng-indigit/src/public-api.ts","../../../projects/ng-indigit/src/ng-indigit.ts"],"sourcesContent":["import { TInput } from '../types';\r\n\r\nconst isNullSubject: (subject: TInput) => boolean = subject => (subject == null) || (`${subject}`.trim() === '');\r\n\r\nexport const BASIC_UTIL: {\r\n  stringify: (subject: TInput) => string;\r\n  makeBoolean: (value: any) => boolean;\r\n} = {\r\n\r\n  stringify: s => {\r\n    if (isNullSubject(s))\r\n      return '';\r\n    return ((typeof s === 'string') ? s : `${s}`).trim();\r\n  },\r\n\r\n  makeBoolean: v => v != null && `${v}` !== 'false'\r\n\r\n};\r\n","import { TInput } from '../types';\r\nimport { BASIC_UTIL } from './_basic.util';\r\n\r\nexport const NUMBER_UTIL: {\r\n  sanitize: (subject: TInput) => string;\r\n  faToEn: (value: TInput) => string;\r\n} = {\r\n\r\n  sanitize: s => BASIC_UTIL.stringify(s)?.replace(/\\D/g, '') || '',\r\n\r\n  faToEn: (subject) => {\r\n    const value = (typeof subject === 'string') ? subject : BASIC_UTIL.stringify(subject);\r\n    return value\r\n      ?.replace(/[\\u0660-\\u0669]/g, c => `${c.charCodeAt(0) - 0x0660}`)\r\n      ?.replace(/[\\u06f0-\\u06f9]/g, c => `${c.charCodeAt(0) - 0x06f0}`) || '';\r\n  }\r\n\r\n};\r\n","import { TInput } from '../types';\r\nimport { NUMBER_UTIL } from './_number.util';\r\nimport { IDigitGroupParam } from '../interfaces';\r\n\r\nexport const DIGIT_GROUP_UTIL: {\r\n  apply: (subject: TInput, params: IDigitGroupParam, isSafeSubject?: boolean) => string;\r\n} = {\r\n\r\n  apply: (subject, params, isSafeSubject) => {\r\n    const value = isSafeSubject ? (subject as string) : NUMBER_UTIL.sanitize(subject);\r\n    return params.groupSize\r\n      ? (value?.replace(RegExp(`(\\\\d)(?=(\\\\d{${params.groupSize}})+$)`, 'g'), `$1${params.delimiter}`) || '')\r\n      : value;\r\n  }\r\n\r\n};\r\n","import { TCustomCharacter, TInput } from '../types';\r\nimport { BASIC_UTIL } from './_basic.util';\r\nimport { NUMBER_UTIL } from './_number.util';\r\n\r\nconst deduplicateFloatPoint: (subject: TInput, floatPoint: TCustomCharacter, isSafeSubject?: true) => string\r\n  = (subject, point, isSafeSubject?) => {\r\n  const value = isSafeSubject ? subject as string : BASIC_UTIL.stringify(subject);\r\n  const i = value.indexOf(point);\r\n  return (i === value.lastIndexOf(point))\r\n    ? value\r\n    : value.substring(0, i) + point + value.substring(i + 1).replace(RegExp(point, 'g'), '');\r\n};\r\n\r\nconst sanitize: (subject: TInput, floatPoint: TCustomCharacter) => string = (subject, point) => {\r\n  let value = NUMBER_UTIL.faToEn(BASIC_UTIL.stringify(subject));\r\n  if (!value)\r\n    return '';\r\n  let sign = '';\r\n  if (value[0] === '-') {\r\n    value = value.substring(1);\r\n    sign = '-';\r\n  }\r\n  const regexp = RegExp(`[^\\\\d\\\\${point}]`, 'g');\r\n  return deduplicateFloatPoint(`${sign}${value.replace(regexp, '')}`, point, true);\r\n};\r\n\r\nexport const FLOAT_UTIL: {\r\n  sanitize: (subject: TInput, floatPoint: TCustomCharacter) => string;\r\n  getIntPart: (subject: TInput, floatPoint: TCustomCharacter, isSafeSubject?: true) => string;\r\n  getDecimals: (subject: TInput, floatPoint: TCustomCharacter, isSafeSubject?: true) => string;\r\n} = {\r\n\r\n  sanitize: (subject, point) => sanitize(subject, point),\r\n\r\n  getIntPart: (subject, point, isSafeSubject?) => {\r\n    let value = isSafeSubject ? subject as string : sanitize(subject, point);\r\n    if (value[0] === '-')\r\n      value = value.substring(1);\r\n    if (!value)\r\n      return '';\r\n    const i = value.indexOf(point);\r\n    if (!i || (value === point))\r\n      return '0';\r\n    while ((value[0] === '0') && (value.length > 1))\r\n      value = value.substring(1);\r\n    return (i < 0) ? value : value.substring(0, i);\r\n  },\r\n\r\n  getDecimals: (subject, point, isSafeSubject?) => {\r\n    const value = isSafeSubject ? subject as string : sanitize(subject, point);\r\n    const i = value.indexOf(point);\r\n    return (i > -1) ? value.substring(i + 1) : '';\r\n  }\r\n\r\n};\r\n","import { TCustomCharacter, TInput } from '../types';\r\nimport { PrettyFloat } from '../classes';\r\nimport { IPrettyFloatDigitGroupParam } from '../interfaces';\r\nimport { FLOAT_UTIL } from './_float.util';\r\nimport { DIGIT_GROUP_UTIL } from './_digit-group.util';\r\n\r\nconst sanitize:\r\n    (subject: TInput, floatPoint: TCustomCharacter, digitGroup?: IPrettyFloatDigitGroupParam, isSafeSubject?: true)\r\n        => string\r\n    = (subject, point, digitGroup?, isSafeSubject?) => {\r\n  const value = isSafeSubject ? subject as string : FLOAT_UTIL.sanitize(subject, point);\r\n  const sign = (value[0] === '-') ? '-' : '';\r\n  const intPart = FLOAT_UTIL.getIntPart(value, point, true);\r\n  if (!intPart)\r\n    return '';\r\n  const decimals = FLOAT_UTIL.getDecimals(value, point, true);\r\n  const pointChar = (decimals.length || (value[value.length - 1] === point)) ? point : '';\r\n  return digitGroup?.hasDigitGroups\r\n      ? `${sign}${DIGIT_GROUP_UTIL.apply(intPart\r\n          , digitGroup.integerPart\r\n          , true)}${pointChar}${DIGIT_GROUP_UTIL.apply(decimals, digitGroup.decimalPart, true)}`\r\n      : `${sign}${intPart}${pointChar}${decimals}`;\r\n};\r\n\r\nexport const PRETTY_FLOAT_UTIL: {\r\n  sanitize:\r\n      (subject: TInput, floatPoint: TCustomCharacter, digitGroup?: IPrettyFloatDigitGroupParam, isSafeSubject?: true)\r\n          => string;\r\n  findFirstChangedIndex: (newSubject: PrettyFloat, oldSubject: PrettyFloat) => number;\r\n  findFirstChangedIndexFromEnd: (newSubject: PrettyFloat, oldSubject: PrettyFloat) => number;\r\n} = {\r\n\r\n  sanitize: (subject, point, digitGroup?, isSafeSubject?) =>\r\n      sanitize(subject, point, digitGroup, isSafeSubject),\r\n\r\n  findFirstChangedIndex: (newSubject, oldSubject) => {\r\n    const newValue = newSubject.prettyValue;\r\n    const oldValue = oldSubject.prettyValue;\r\n    const groupDelimiters = newSubject.digitGroupDelimiters;\r\n    let i = 0;\r\n    let j = 0;\r\n    while ((i < newValue.length) && (j < oldValue.length)) {\r\n      if (groupDelimiters.indexOf(newValue[i]) > -1) {\r\n        i++;\r\n        continue;\r\n      }\r\n      if (groupDelimiters.indexOf(oldValue[j]) > -1) {\r\n        j++;\r\n        continue;\r\n      }\r\n      if (newValue[i] !== oldValue[j])\r\n        return i;\r\n      i++;\r\n      j++;\r\n    }\r\n    return newValue.length;\r\n  },\r\n\r\n  findFirstChangedIndexFromEnd: (newSubject, oldSubject) => {\r\n    const newValue = newSubject.prettyValue;\r\n    const oldValue = oldSubject.prettyValue;\r\n    const groupDelimiters = newSubject.digitGroupDelimiters;\r\n    let i = newValue.length - 1;\r\n    let j = oldValue.length - 1;\r\n    while ((i > -1) && (j > -1)) {\r\n      if (groupDelimiters.indexOf(newValue[i]) > -1) {\r\n        i--;\r\n        continue;\r\n      }\r\n      if (groupDelimiters.indexOf(oldValue[j]) > -1) {\r\n        j--;\r\n        continue;\r\n      }\r\n      if (newValue[i] !== oldValue[j])\r\n        return i;\r\n      i--;\r\n      j--;\r\n    }\r\n    return i;\r\n  }\r\n\r\n};\r\n","import { IDigitGroupParam, IPrettyFloatDecimalParam } from '../interfaces';\r\n\r\nexport const DEFAULT_CONFIG: {\r\n  decimal: Partial<IPrettyFloatDecimalParam>;\r\n  digitGroups: IDigitGroupParam;\r\n} = {\r\n  decimal: {\r\n    floatPoint: '.',\r\n    minDigitCount: 0,\r\n    maxDigitCount: -1,\r\n  },\r\n  digitGroups: {\r\n    groupSize: 3,\r\n    delimiter: ' '\r\n  }\r\n};\r\n\r\n","import { IDigitGroupParam } from '../interfaces';\r\n\r\nexport function isDigitGroupOptionObject(value: any): value is Partial<IDigitGroupParam> {\r\n  return value\r\n    && (typeof value === 'object')\r\n    && (['groupSize', 'delimiter'] as (keyof IDigitGroupParam)[]).some(key => key in value);\r\n}\r\n\r\n","import { IPrettyFloatDecimalParam } from '../interfaces';\r\n\r\nexport function isPrettyFloatDecimalOptionObject(value: any): value is Partial<IPrettyFloatDecimalParam> {\r\n  return value\r\n    && (typeof value === 'object')\r\n    && (['floatPoint', 'isDecimalAllowed', 'maxDigitCount', 'minDigitCount'] as (keyof IPrettyFloatDecimalParam)[])\r\n      .some(key => key in value);\r\n}\r\n","import { TCustomCharacter } from '../types';\r\n\r\nexport function isCharacter(value: any): value is TCustomCharacter {\r\n  return (typeof value === 'string') && (value.length === 1);\r\n}\r\n","import { IPrettyFloatDigitGroupOption } from '../interfaces';\r\n\r\nexport function isPrettyFloatDigitGroupOptionObject(value: any): value is IPrettyFloatDigitGroupOption {\r\n  return value\r\n    && (typeof value === 'object')\r\n    && (['decimalPart', 'integerPart', 'hasDigitGroups'] as (keyof IPrettyFloatDigitGroupOption)[])\r\n      .some(key => key in value);\r\n}\r\n\r\n","import { DEFAULT_CONFIG } from '../helpers/default-config';\r\nimport { isCharacter, isDigitGroupOptionObject, isPrettyFloatDecimalOptionObject, isPrettyFloatDigitGroupOptionObject } from '../type-predicates';\r\nimport { BASIC_UTIL } from './_basic.util';\r\nimport { IDigitGroupParam, IPrettyFloatDecimalParam, IPrettyFloatDigitGroupOption, IPrettyFloatDigitGroupParam } from '../interfaces';\r\n\r\nconst makeBoolean = BASIC_UTIL.makeBoolean;\r\nconst digitGroupDefaults: IPrettyFloatDigitGroupParam = {\r\n  integerPart: { ...DEFAULT_CONFIG.digitGroups },\r\n  decimalPart: { ...DEFAULT_CONFIG.digitGroups },\r\n  hasDigitGroups: false\r\n};\r\n\r\nconst sanitizeDigitGroupDelimiter: (params: Partial<IDigitGroupParam>) => Partial<IDigitGroupParam> = params => {\r\n  const delimiter = params.delimiter;\r\n  if (delimiter && !isCharacter(delimiter)) {\r\n    console.warn('[NgIndigit] Invalid Digit Group Delimiter! The default character will be used!');\r\n    delete params.delimiter;\r\n  }\r\n  return params;\r\n};\r\n\r\nconst digitGroupParamFromGenericOption:\r\n  (option: Partial<IDigitGroupParam>, preset: IPrettyFloatDigitGroupParam) => IPrettyFloatDigitGroupParam\r\n  = (option, preset) => {\r\n  const params = { ...preset };\r\n  (['integerPart', 'decimalPart'] as (keyof Omit<IPrettyFloatDigitGroupParam, 'hasDigitGroups'>)[])\r\n    .forEach(part => Object.assign(params[part], sanitizeDigitGroupDelimiter(option), params[part]));\r\n  return params;\r\n};\r\n\r\nconst digitGroupParamFromPrettyFloatOption:\r\n  (option: IPrettyFloatDigitGroupOption, preset: IPrettyFloatDigitGroupParam) => IPrettyFloatDigitGroupParam\r\n  = (option, preset) => {\r\n  const params: IPrettyFloatDigitGroupParam = { ...preset };\r\n  (['integerPart', 'decimalPart'] as (keyof Omit<IPrettyFloatDigitGroupParam, 'hasDigitGroups'>)[])\r\n    .forEach(part => {\r\n      const partOption = option[part];\r\n      if (isDigitGroupOptionObject(partOption))\r\n        params[part] = { ...params[part], ...sanitizeDigitGroupDelimiter(partOption) };\r\n      else if (partOption === false)\r\n        params[part] = { ...params[part], groupSize: 0 };\r\n    });\r\n  return params;\r\n};\r\n\r\nexport const PRETTY_FLOAT_PARAM_UTIL: {\r\n  decimal: (option: any) => IPrettyFloatDecimalParam;\r\n  digitGroup: (...option: any[]) => IPrettyFloatDigitGroupParam;\r\n} = {\r\n\r\n  decimal: options => {\r\n    const decimalDefaults = DEFAULT_CONFIG.decimal;\r\n    const defaults = { ...decimalDefaults, isDecimalAllowed: false } as IPrettyFloatDecimalParam;\r\n    if (isPrettyFloatDecimalOptionObject(options)) {\r\n      const point = options.floatPoint;\r\n      if (point && !isCharacter(point)) {\r\n        console.warn('[NgIndigit] Invalid Float Point! The default character will be used!');\r\n        delete options.floatPoint;\r\n      }\r\n      return { ...defaults, ...options, isDecimalAllowed: options.isDecimalAllowed ?? (options.maxDigitCount !== 0) };\r\n    }\r\n    return { ...defaults, isDecimalAllowed: makeBoolean(options) };\r\n  },\r\n\r\n  digitGroup: (...options) => {\r\n    if (!makeBoolean(options))\r\n      return digitGroupDefaults;\r\n    let params: IPrettyFloatDigitGroupParam = { ...digitGroupDefaults };\r\n    for (const option of options) {\r\n      if (option == null)\r\n        continue;\r\n      if (isPrettyFloatDigitGroupOptionObject(option))\r\n        params = digitGroupParamFromPrettyFloatOption(option, params);\r\n      if (isDigitGroupOptionObject(option))\r\n        params = digitGroupParamFromGenericOption(option, params);\r\n      params.hasDigitGroups\r\n        = option.hasDigitGroups ?? ((params.integerPart.groupSize > 0) || (params.decimalPart.groupSize > 0));\r\n    }\r\n    return params;\r\n  }\r\n\r\n};\r\n","import { IPrettyFloatDecimalParam, IPrettyFloatDigitGroupParam, IPrettyFloatPointIndex, IPrettyFloatValue } from '../../interfaces';\nimport { DIGIT_GROUP_UTIL, PRETTY_FLOAT_PARAM_UTIL, NUMBER_UTIL, FLOAT_UTIL, PRETTY_FLOAT_UTIL } from '../../utils';\nimport { TCustomCharacter, TInput } from '../../types';\n\nconst getDigitGroupParams = PRETTY_FLOAT_PARAM_UTIL.digitGroup;\nconst getDecimalParams = PRETTY_FLOAT_PARAM_UTIL.decimal;\nconst sanitizeNum = NUMBER_UTIL.sanitize;\n\nexport class PrettyFloat {\n\n  private _value!: IPrettyFloatValue;\n  private _pointIndex!: IPrettyFloatPointIndex;\n  private _hasDecimalPart!: boolean;\n  private _forcedDecimals!: number;\n  private _trimmedDecimals!: string;\n  private _decimalParams!: IPrettyFloatDecimalParam;\n  private _digitGroupParams!: IPrettyFloatDigitGroupParam;\n\n  constructor(subject: TInput, decimal?: any, digitGroup?: any) {\n    this.initValues(subject, decimal, digitGroup);\n  }\n\n  get value(): IPrettyFloatValue {\n    return this._value;\n  }\n\n  get pointIndex(): IPrettyFloatPointIndex {\n    return this._pointIndex;\n  }\n\n  get forcedDecimals(): number {\n    return (this._decimalParams.isDecimalAllowed && this._hasDecimalPart) ? this._forcedDecimals : 0;\n  }\n\n  get trimmedDecimals(): string {\n    return this._decimalParams.isDecimalAllowed ? this._trimmedDecimals : '';\n  }\n\n  get hasDecimalPart(): boolean {\n    return this._hasDecimalPart;\n  }\n\n  get digitGroupDelimiters(): TCustomCharacter[] {\n    const delimiters: TCustomCharacter[] = [];\n    if (!this._digitGroupParams?.hasDigitGroups)\n      return delimiters;\n    if (this._digitGroupParams.integerPart.groupSize > 0)\n      delimiters.push(this._digitGroupParams.integerPart.delimiter);\n    if (this._digitGroupParams.decimalPart.groupSize > 0)\n      delimiters.push(this._digitGroupParams.decimalPart.delimiter);\n    return delimiters;\n  }\n\n  get isNegative(): boolean {\n    const number = this.value.number;\n    return (number != null) && (number < 0);\n  }\n\n  get prettyValue(): string {\n    return this._value.pretty;\n  }\n\n  get numberValue(): number | null {\n    return this._value.number;\n  }\n\n  get intPart(): number | null {\n    const value = Number(this._value.number?.toFixed());\n    return Number.isNaN(value) ? null : value;\n  }\n\n  get prettyIntPart(): string {\n    const prettyInt = this._value.pretty;\n    return (this._pointIndex.prettyIndex > -1) ? prettyInt.substring(0, this._pointIndex.prettyIndex) : prettyInt;\n  }\n\n  get decimals(): string {\n    return this._hasDecimalPart ? `${this._value.number}`.substring(this._pointIndex.numberIndex + 1) : '';\n  }\n\n  get prettyDecimals(): string {\n    return this._hasDecimalPart ? this._value.pretty.substring(this._pointIndex.prettyIndex + 1) : '';\n  }\n\n  get decimalParams(): IPrettyFloatDecimalParam {\n    return this._decimalParams;\n  }\n\n  get digitGroupParams(): IPrettyFloatDigitGroupParam {\n    return this._digitGroupParams;\n  }\n\n  clone(): PrettyFloat {\n    return new PrettyFloat(this.prettyValue, this.decimalParams, this.digitGroupParams);\n  }\n\n  updateIntPartDigitGroupParams(params: any): PrettyFloat {\n    this._digitGroupParams = getDigitGroupParams(this._digitGroupParams, { integerPart: params });\n    return this.updateValue(this.prettyValue);\n  }\n\n  updateDecimalsDigitGroupParams(params: any): PrettyFloat {\n    this._digitGroupParams = getDigitGroupParams(this._digitGroupParams, { decimalPart: params });\n    return this.updateValue(this.prettyValue);\n  }\n\n  updateDigitGroupParams(params: any): PrettyFloat {\n    this._digitGroupParams = getDigitGroupParams(this._digitGroupParams, params);\n    return this.updateValue(this.prettyValue);\n  }\n\n  updateDecimalParams(decimal: any): PrettyFloat {\n    this._decimalParams = getDecimalParams(decimal);\n    return this.updateValue(this.prettyValue);\n  }\n\n  updateValue(newValue: TInput): PrettyFloat {\n    this.value = this._decimalParams.isDecimalAllowed\n      ? this.getValueWithDecimals(newValue)\n      : this.getValueWithoutDecimals(newValue);\n    return this;\n  }\n\n  private set digitGroupParams(digitGroup: any) {\n    this._digitGroupParams = getDigitGroupParams(digitGroup);\n  }\n\n  private set decimalParams(decimal: any) {\n    this._decimalParams = getDecimalParams(decimal);\n  }\n\n  private set value(value: IPrettyFloatValue) {\n    this._value = value;\n    if (!this._pointIndex)\n      this._pointIndex = { prettyIndex: -1, numberIndex: -1 };\n    if (!this.decimalParams.isDecimalAllowed)\n      return;\n    this.updateFloatPointIndices();\n  }\n\n  private updateFloatPointIndices(): void {\n    this.updateNumberValuePointIndex();\n    this.updatePrettyValuePointIndex();\n  }\n\n  private updateNumberValuePointIndex(): void {\n    this._pointIndex.numberIndex = `${this.numberValue ?? ''}`.indexOf('.');\n  }\n\n  private updatePrettyValuePointIndex(): void {\n    this._pointIndex.prettyIndex = this.prettyValue.indexOf(this.decimalParams.floatPoint);\n  }\n\n  private initValues(subject: TInput, decimal?: any, digitGroup?: any): void {\n    this.setParams(decimal, digitGroup);\n    this.value = this._decimalParams?.isDecimalAllowed\n      ? this.getValueWithDecimals(subject)\n      : this.getValueWithoutDecimals(subject);\n  }\n\n  private setParams(decimal?: any, digitGroup?: any) {\n    this.decimalParams = decimal;\n    this.digitGroupParams = digitGroup;\n    this._hasDecimalPart = false;\n  }\n\n  private getValueWithoutDecimals(subject: TInput): IPrettyFloatValue {\n    let value = sanitizeNum(subject);\n    while (value[0] === '0')\n      value = value.substring(1);\n    if (!value)\n      return { pretty: '', number: null };\n    const params = this._digitGroupParams;\n    return {\n      number: parseInt(value, 10),\n      pretty: params.hasDigitGroups ? DIGIT_GROUP_UTIL.apply(value, params.integerPart) : value\n    };\n  }\n\n  private getValueWithDecimals(subject: TInput): IPrettyFloatValue {\n    this.resetDecimalPartParams();\n    const floatPoint = this._decimalParams.floatPoint;\n    const value = FLOAT_UTIL.sanitize(subject, floatPoint);\n    const intPart = FLOAT_UTIL.getIntPart(value, floatPoint, true);\n    if (!value || !intPart)\n      return { pretty: '', number: null };\n    const decimals = this.getDecimals(value);\n    return {\n      number: parseFloat(`${intPart}.${decimals}`),\n      pretty: PRETTY_FLOAT_UTIL.sanitize(`${intPart}${(decimals.length || (value[value.length - 1] === floatPoint)) ? floatPoint : ''}${decimals}`\n        , floatPoint, this._digitGroupParams, true)\n    };\n  }\n\n  private resetDecimalPartParams(): void {\n    this._forcedDecimals = 0;\n    this._trimmedDecimals = '';\n  }\n\n  private getDecimals(value: string): string {\n    const params = this._decimalParams;\n    let decimal = FLOAT_UTIL.getDecimals(value, params.floatPoint, true);\n    if (params.minDigitCount > 0)\n      decimal = this.appendZeroDecimals(decimal);\n    if (params.maxDigitCount > -1)\n      decimal = this.trimRedundantDecimals(decimal);\n    this._hasDecimalPart = !!decimal;\n    return decimal;\n  }\n\n  private appendZeroDecimals(decimalPart: string): string {\n    let decimal = decimalPart;\n    while (decimal.length < this._decimalParams.minDigitCount) {\n      decimal += '0';\n      this._forcedDecimals++;\n    }\n    return decimal;\n  }\n\n  private trimRedundantDecimals(decimalPart: string): string {\n    let decimal = decimalPart;\n    while (decimal.length > this._decimalParams.maxDigitCount) {\n      const lastIndex = decimal.length - 1;\n      const lastDigit = decimal[lastIndex];\n      if ((lastDigit === '0') && (this._forcedDecimals > 0))\n        this._forcedDecimals--;\n      else\n        this._trimmedDecimals = `${lastDigit}${this._trimmedDecimals}`;\n      decimal = decimal.substring(0, lastIndex);\n    }\n    return decimal;\n  }\n\n}\n","import { Directive, ElementRef, forwardRef, HostListener, Input, Renderer2, Self } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { TIndicatorPosition } from './types';\nimport { IIndigitState, ITextInputSelection } from './interfaces';\nimport { PrettyFloat } from './classes';\nimport { BASIC_UTIL, PRETTY_FLOAT_UTIL } from './utils';\n\n@Directive({\n  selector: 'input[type=\"text\"][ng-indigit]',\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    // eslint-disable-next-line no-use-before-define\n    useExisting: forwardRef(() => IndigitDirective),\n    multi: true\n  }]\n})\nexport class IndigitDirective implements ControlValueAccessor {\n\n  @Input()\n  set decimalDigitGroups(params: any) {\n    this.clearHistory();\n    this.value = this._value.updateDecimalsDigitGroupParams(params);\n  }\n\n  @Input()\n  set integerDigitGroups(params: any) {\n    this.clearHistory();\n    this.value = this._value.updateIntPartDigitGroupParams(params);\n  }\n\n  @Input()\n  set decimal(params: any) {\n    this.clearHistory();\n    this.value = this._value.updateDecimalParams(params);\n  }\n\n  @Input()\n  set allowNegative(value: any) {\n    this.clearHistory();\n    this._allowNegative = BASIC_UTIL.makeBoolean(value);\n  }\n\n  private _value!: PrettyFloat;\n  private _selection!: ITextInputSelection;\n  private _isContinuousKeydown!: boolean;\n  private _inputElement!: HTMLInputElement;\n  private _nextIndicatorPosition!: TIndicatorPosition;\n  private _history: IIndigitState[] = [];\n  private _allowNegative: boolean = true;\n  private _onChange = (_: any) => { };\n  private _onTouched = () => { };\n\n  constructor(@Self() private _el: ElementRef, private _render: Renderer2) {\n    this.init();\n  }\n\n  set value(newValue: PrettyFloat) {\n    this._value = newValue;\n    this.hostValue = newValue.prettyValue;\n    this.modelValue = newValue.numberValue;\n  }\n\n  writeValue(value: any): void {\n    this._value.updateValue(value);\n    this.hostValue = this._value.prettyValue;\n  }\n\n  registerOnChange(fn: any): void {this._onChange = fn;}\n\n  registerOnTouched(fn: any): void {this._onTouched = fn;}\n\n  setDisabledState(isDisabled: boolean): void {\n    if (this._inputElement)\n      this._render.setProperty(this._inputElement, 'disabled', isDisabled);\n  }\n\n  @HostListener('keyup')\n  onKeyup(): void {\n    this._isContinuousKeydown = false;\n  }\n\n  @HostListener('keydown', ['$event'])\n  onKeydown(event: KeyboardEvent): void {\n    const key = event.key;\n    if (this._isContinuousKeydown || (['Control', 'Alt', 'Shift'].indexOf(key) > -1))\n      return;\n    if (event.repeat) {\n      this._isContinuousKeydown = true;\n      return;\n    }\n    if (event.ctrlKey && (event.code === 'KeyZ')) {\n      event.preventDefault();\n      this.undo();\n      return;\n    }\n    this.saveState();\n    const indices = this._selection;\n    const indicatorPosition = indices.endIndex;\n    if (indicatorPosition === indices.startIndex)\n      return this.onZeroSelectionKeydown(event.key, indicatorPosition);\n    this._nextIndicatorPosition = 'beforeOldRightSide';\n  }\n\n  @HostListener('mousedown')\n  onMousedown(): void {\n    this.saveState();\n  }\n\n  @HostListener('input')\n  onInput(): void {\n    const history = this._history;\n    this.updateAfterUserInput(this._value.updateValue(this._inputElement.value), history[history.length - 1]?.value || null);\n  }\n\n  @HostListener('blur')\n  onBlur(): void {\n    this.clearHistory();\n    this._onTouched();\n  }\n\n  private set hostValue(value: string) {\n    this._render.setProperty(this._inputElement, 'value', value);\n  }\n\n  private set modelValue(value: number | null) {\n    this._onChange(value);\n  }\n\n  private set hostSelectionStart(index: number) {\n    this._render.setProperty(this._inputElement, 'selectionStart', index);\n  }\n\n  private set hostSelectionEnd(index: number) {\n    this._render.setProperty(this._inputElement, 'selectionEnd', index);\n  }\n\n  private set hostSelection(indices: ITextInputSelection) {\n    this.hostSelectionStart = indices.startIndex;\n    this.hostSelectionEnd = indices.endIndex;\n  }\n\n  private set selection(indices: ITextInputSelection) {\n    this._selection = indices;\n    this.hostSelection = indices;\n  }\n\n  private set indicatorPosition(position: number) {\n    this.selection = { endIndex: position, startIndex: position };\n  }\n\n  private get selectionIndicesFromHost(): ITextInputSelection {\n    return { startIndex: this.selectionStartFromHost, endIndex: this.selectionEndFromHost };\n  }\n\n  private get selectionStartFromHost(): number {\n    return this._inputElement?.selectionStart || 0;\n  }\n\n  private get selectionEndFromHost(): number {\n    return this._inputElement?.selectionEnd || 0;\n  }\n\n  private updateSelectionIndicesFromHost(): void {\n    this._selection = this.selectionIndicesFromHost;\n  }\n\n  private onZeroSelectionKeydown(key: string, indicatorPosition: number): void {\n    this._nextIndicatorPosition = this.getIndicatorPositionAfterSingleCharacterChange(key);\n    if (this.isBackspaceKeyAfterDigitGroupDelimiter(key, indicatorPosition)) {\n      this.indicatorPosition = indicatorPosition - 1;\n      return;\n    }\n    if (this.isDeleteKeyBeforeDigitGroupDelimiter(key, indicatorPosition))\n      this.indicatorPosition = indicatorPosition + 1;\n  }\n\n  private isBackspaceKeyAfterDigitGroupDelimiter(key: string, indicatorPosition: number): boolean {\n    const value = this._value;\n    return !!value\n      && (key === 'Backspace')\n      && (value.digitGroupDelimiters.indexOf(value.prettyValue[indicatorPosition - 1]) > -1);\n  }\n\n  private isDeleteKeyBeforeDigitGroupDelimiter(keyCode: string, indicatorPosition: number): boolean {\n    const value = this._value;\n    return !!value\n      && (keyCode === 'Delete')\n      && (value.digitGroupDelimiters.indexOf(value.prettyValue[indicatorPosition]) > -1);\n  }\n\n  private getIndicatorPositionAfterSingleCharacterChange(key: string): TIndicatorPosition {\n    const decimalParams = this._value.decimalParams;\n    if (decimalParams.isDecimalAllowed && (this._value.pointIndex.prettyIndex < 0) && (key === decimalParams.floatPoint))\n      return 'afterFloatPoint';\n    if (key === 'Delete')\n      return 'afterOldLeftSide';\n    return 'beforeOldRightSide';\n  }\n\n  private saveState(): void {\n    this.updateSelectionIndicesFromHost();\n    this._history.push({\n      value: this._value.clone(),\n      selectionIndices: this._selection\n    });\n  }\n\n  private undo(): void {\n    const lastState = this._history.pop();\n    if (!lastState) {\n      this.reset();\n      return;\n    }\n    this.value = lastState.value;\n    this.selection = lastState.selectionIndices;\n  }\n\n  private clearHistory(): void {\n    this._history = [];\n  }\n\n  private reset(): void {\n    this.clearHistory();\n    this.value = this._value.updateValue(null);\n    this.indicatorPosition = 0;\n  }\n\n  private init(): void {\n    this._inputElement = this._el.nativeElement as HTMLInputElement;\n    if (!this._inputElement)\n      throw new Error('No host element found!');\n    this.value = new PrettyFloat(this._inputElement.value);\n  }\n\n  private updateAfterUserInput(newValue: PrettyFloat, oldValue: PrettyFloat | null): void {\n    if (!oldValue?.prettyValue || !newValue.prettyValue)\n      this._nextIndicatorPosition = 'endOfLine';\n    const oldForcedDecimals = oldValue?.forcedDecimals;\n\n    // strip appended 0 decimals of old value in case float point is removed\n    if (oldForcedDecimals && newValue && (newValue.pointIndex.prettyIndex < 0)) {\n      newValue.updateValue(`${newValue.numberValue}`.slice(0, -oldForcedDecimals));\n      oldValue?.updateValue(`${oldValue?.numberValue}`.slice(0, -oldForcedDecimals));\n    }\n\n    this.value = newValue;\n    this.indicatorPosition = this.getIndicatorPositionAfterUserInput(newValue, oldValue);\n  }\n\n  private getIndicatorPositionAfterUserInput(newValue: PrettyFloat, oldValue: PrettyFloat | null): number {\n    const newValueEndIndex = newValue.prettyValue.length;\n    if (!oldValue)\n      return newValueEndIndex;\n    switch (this._nextIndicatorPosition) {\n      case 'endOfLine':\n        return newValueEndIndex;\n      case 'afterFloatPoint':\n        return newValue.pointIndex.prettyIndex + 1;\n      case 'afterOldLeftSide':\n        return PRETTY_FLOAT_UTIL.findFirstChangedIndex(newValue, oldValue);\n      default:\n        return this.getIndicatorPositionByReverseOldIndex(newValue, oldValue);\n    }\n  }\n\n  private getIndicatorPositionByReverseOldIndex(newValue: PrettyFloat, oldValue: PrettyFloat): number {\n    const selectionIndices = this._history[this._history.length - 1].selectionIndices;\n    const selectionIndex = Math.max(selectionIndices.startIndex, selectionIndices.endIndex);\n    const oldPretty = oldValue.prettyValue;\n    const newValueLength = newValue.prettyValue.length;\n    if (selectionIndex >= oldPretty.length)\n      return newValueLength;\n    return newValue.digitGroupParams.hasDigitGroups\n      ? (PRETTY_FLOAT_UTIL.findFirstChangedIndexFromEnd(newValue, oldValue) + 1)\n      : (newValueLength - oldPretty.substring(selectionIndex).length);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { IndigitDirective } from './indigit.directive';\n\n\n@NgModule({\n  declarations: [IndigitDirective],\n  exports: [IndigitDirective]\n})\nexport class NgIndigitModule {}\n","// supplementary\nexport * from './lib/classes';\nexport * from './lib/interfaces';\nexport * from './lib/types';\nexport * from './lib/utils';\n\n// the directive\nexport * from './lib/indigit.directive';\n\n// the module\nexport * from './lib/ng-indigit.module';\n\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["sanitize"],"mappings":"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"}