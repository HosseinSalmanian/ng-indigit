import { DIGIT_GROUP_UTIL, PRETTY_FLOAT_PARAM_UTIL, NUMBER_UTIL, FLOAT_UTIL, PRETTY_FLOAT_UTIL } from '../../utils';
const getDigitGroupParams = PRETTY_FLOAT_PARAM_UTIL.digitGroup;
const getDecimalParams = PRETTY_FLOAT_PARAM_UTIL.decimal;
const sanitizeNum = NUMBER_UTIL.sanitize;
export class PrettyFloat {
    constructor(subject, decimal, digitGroup) {
        this.initValues(subject, decimal, digitGroup);
    }
    get value() {
        return this._value;
    }
    get pointIndex() {
        return this._pointIndex;
    }
    get forcedDecimals() {
        return (this._decimalParams.isDecimalAllowed && this._hasDecimalPart) ? this._forcedDecimals : 0;
    }
    get trimmedDecimals() {
        return this._decimalParams.isDecimalAllowed ? this._trimmedDecimals : '';
    }
    get hasDecimalPart() {
        return this._hasDecimalPart;
    }
    get digitGroupDelimiters() {
        const delimiters = [];
        if (!this._digitGroupParams?.hasDigitGroups)
            return delimiters;
        if (this._digitGroupParams.integerPart.groupSize > 0)
            delimiters.push(this._digitGroupParams.integerPart.delimiter);
        if (this._digitGroupParams.decimalPart.groupSize > 0)
            delimiters.push(this._digitGroupParams.decimalPart.delimiter);
        return delimiters;
    }
    get isNegative() {
        const number = this.value.number;
        return (number != null) && (number < 0);
    }
    get prettyValue() {
        return this._value.pretty;
    }
    get numberValue() {
        return this._value.number;
    }
    get intPart() {
        const value = Number(this._value.number?.toFixed());
        return Number.isNaN(value) ? null : value;
    }
    get prettyIntPart() {
        const prettyInt = this._value.pretty;
        return (this._pointIndex.prettyIndex > -1) ? prettyInt.substring(0, this._pointIndex.prettyIndex) : prettyInt;
    }
    get decimals() {
        return this._hasDecimalPart ? `${this._value.number}`.substring(this._pointIndex.numberIndex + 1) : '';
    }
    get prettyDecimals() {
        return this._hasDecimalPart ? this._value.pretty.substring(this._pointIndex.prettyIndex + 1) : '';
    }
    get decimalParams() {
        return this._decimalParams;
    }
    get digitGroupParams() {
        return this._digitGroupParams;
    }
    clone() {
        return new PrettyFloat(this.prettyValue, this.decimalParams, this.digitGroupParams);
    }
    updateIntPartDigitGroupParams(params) {
        this._digitGroupParams = getDigitGroupParams(this._digitGroupParams, { integerPart: params });
        return this.updateValue(this.prettyValue);
    }
    updateDecimalsDigitGroupParams(params) {
        this._digitGroupParams = getDigitGroupParams(this._digitGroupParams, { decimalPart: params });
        return this.updateValue(this.prettyValue);
    }
    updateDigitGroupParams(params) {
        this._digitGroupParams = getDigitGroupParams(this._digitGroupParams, params);
        return this.updateValue(this.prettyValue);
    }
    updateDecimalParams(decimal) {
        this._decimalParams = getDecimalParams(decimal);
        return this.updateValue(this.prettyValue);
    }
    updateValue(newValue) {
        this.value = this._decimalParams.isDecimalAllowed
            ? this.getValueWithDecimals(newValue)
            : this.getValueWithoutDecimals(newValue);
        return this;
    }
    set digitGroupParams(digitGroup) {
        this._digitGroupParams = getDigitGroupParams(digitGroup);
    }
    set decimalParams(decimal) {
        this._decimalParams = getDecimalParams(decimal);
    }
    set value(value) {
        this._value = value;
        if (!this._pointIndex)
            this._pointIndex = { prettyIndex: -1, numberIndex: -1 };
        if (!this.decimalParams.isDecimalAllowed)
            return;
        this.updateFloatPointIndices();
    }
    updateFloatPointIndices() {
        this.updateNumberValuePointIndex();
        this.updatePrettyValuePointIndex();
    }
    updateNumberValuePointIndex() {
        this._pointIndex.numberIndex = `${this.numberValue ?? ''}`.indexOf('.');
    }
    updatePrettyValuePointIndex() {
        this._pointIndex.prettyIndex = this.prettyValue.indexOf(this.decimalParams.floatPoint);
    }
    initValues(subject, decimal, digitGroup) {
        this.setParams(decimal, digitGroup);
        this.value = this._decimalParams?.isDecimalAllowed
            ? this.getValueWithDecimals(subject)
            : this.getValueWithoutDecimals(subject);
    }
    setParams(decimal, digitGroup) {
        this.decimalParams = decimal;
        this.digitGroupParams = digitGroup;
        this._hasDecimalPart = false;
    }
    getValueWithoutDecimals(subject) {
        let value = sanitizeNum(subject);
        while (value[0] === '0')
            value = value.substring(1);
        if (!value)
            return { pretty: '', number: null };
        const params = this._digitGroupParams;
        return {
            number: parseInt(value, 10),
            pretty: params.hasDigitGroups ? DIGIT_GROUP_UTIL.apply(value, params.integerPart) : value
        };
    }
    getValueWithDecimals(subject) {
        this.resetDecimalPartParams();
        const floatPoint = this._decimalParams.floatPoint;
        const value = FLOAT_UTIL.sanitize(subject, floatPoint);
        const intPart = FLOAT_UTIL.getIntPart(value, floatPoint, true);
        if (!value || !intPart)
            return { pretty: '', number: null };
        const decimals = this.getDecimals(value);
        return {
            number: parseFloat(`${intPart}.${decimals}`),
            pretty: PRETTY_FLOAT_UTIL.sanitize(`${intPart}${(decimals.length || (value[value.length - 1] === floatPoint)) ? floatPoint : ''}${decimals}`, floatPoint, this._digitGroupParams, true)
        };
    }
    resetDecimalPartParams() {
        this._forcedDecimals = 0;
        this._trimmedDecimals = '';
    }
    getDecimals(value) {
        const params = this._decimalParams;
        let decimal = FLOAT_UTIL.getDecimals(value, params.floatPoint, true);
        if (params.minDigitCount > 0)
            decimal = this.appendZeroDecimals(decimal);
        if (params.maxDigitCount > -1)
            decimal = this.trimRedundantDecimals(decimal);
        this._hasDecimalPart = !!decimal;
        return decimal;
    }
    appendZeroDecimals(decimalPart) {
        let decimal = decimalPart;
        while (decimal.length < this._decimalParams.minDigitCount) {
            decimal += '0';
            this._forcedDecimals++;
        }
        return decimal;
    }
    trimRedundantDecimals(decimalPart) {
        let decimal = decimalPart;
        while (decimal.length > this._decimalParams.maxDigitCount) {
            const lastIndex = decimal.length - 1;
            const lastDigit = decimal[lastIndex];
            if ((lastDigit === '0') && (this._forcedDecimals > 0))
                this._forcedDecimals--;
            else
                this._trimmedDecimals = `${lastDigit}${this._trimmedDecimals}`;
            decimal = decimal.substring(0, lastIndex);
        }
        return decimal;
    }
}
//# sourceMappingURL=data:application/json;base64,