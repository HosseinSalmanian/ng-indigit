import { FLOAT_UTIL } from './_float.util';
import { DIGIT_GROUP_UTIL } from './_digit-group.util';
const sanitize = (subject, point, digitGroup, isSafeSubject) => {
    const value = isSafeSubject ? subject : FLOAT_UTIL.sanitize(subject, point);
    const sign = (value[0] === '-') ? '-' : '';
    const intPart = FLOAT_UTIL.getIntPart(value, point, true);
    if (!intPart)
        return '';
    const decimals = FLOAT_UTIL.getDecimals(value, point, true);
    const pointChar = (decimals.length || (value[value.length - 1] === point)) ? point : '';
    return digitGroup?.hasDigitGroups
        ? `${sign}${DIGIT_GROUP_UTIL.apply(intPart, digitGroup.integerPart, true)}${pointChar}${DIGIT_GROUP_UTIL.apply(decimals, digitGroup.decimalPart, true)}`
        : `${sign}${intPart}${pointChar}${decimals}`;
};
export const PRETTY_FLOAT_UTIL = {
    sanitize: (subject, point, digitGroup, isSafeSubject) => sanitize(subject, point, digitGroup, isSafeSubject),
    findFirstChangedIndex: (newSubject, oldSubject) => {
        const newValue = newSubject.prettyValue;
        const oldValue = oldSubject.prettyValue;
        const groupDelimiters = newSubject.digitGroupDelimiters;
        let i = 0;
        let j = 0;
        while ((i < newValue.length) && (j < oldValue.length)) {
            if (groupDelimiters.indexOf(newValue[i]) > -1) {
                i++;
                continue;
            }
            if (groupDelimiters.indexOf(oldValue[j]) > -1) {
                j++;
                continue;
            }
            if (newValue[i] !== oldValue[j])
                return i;
            i++;
            j++;
        }
        return newValue.length;
    },
    findFirstChangedIndexFromEnd: (newSubject, oldSubject) => {
        const newValue = newSubject.prettyValue;
        const oldValue = oldSubject.prettyValue;
        const groupDelimiters = newSubject.digitGroupDelimiters;
        let i = newValue.length - 1;
        let j = oldValue.length - 1;
        while ((i > -1) && (j > -1)) {
            if (groupDelimiters.indexOf(newValue[i]) > -1) {
                i--;
                continue;
            }
            if (groupDelimiters.indexOf(oldValue[j]) > -1) {
                j--;
                continue;
            }
            if (newValue[i] !== oldValue[j])
                return i;
            i--;
            j--;
        }
        return i;
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3ByZXR0eS1mbG9hdC51dGlsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctaW5kaWdpdC9zcmMvbGliL3V0aWxzL19wcmV0dHktZmxvYXQudXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXZELE1BQU0sUUFBUSxHQUdSLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxVQUFXLEVBQUUsYUFBYyxFQUFFLEVBQUU7SUFDcEQsTUFBTSxLQUFLLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQyxPQUFpQixDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN0RixNQUFNLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDM0MsTUFBTSxPQUFPLEdBQUcsVUFBVSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzFELElBQUksQ0FBQyxPQUFPO1FBQ1YsT0FBTyxFQUFFLENBQUM7SUFDWixNQUFNLFFBQVEsR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDNUQsTUFBTSxTQUFTLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDeEYsT0FBTyxVQUFV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WCxDQUFDLEVBQUUsQ0FBQztZQUNKLENBQUMsRUFBRSxDQUFDO1NBQ0w7UUFDRCxPQUFPLENBQUMsQ0FBQztJQUNYLENBQUM7Q0FFRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVEN1c3RvbUNoYXJhY3RlciwgVElucHV0IH0gZnJvbSAnLi4vdHlwZXMnO1xyXG5pbXBvcnQgeyBQcmV0dHlGbG9hdCB9IGZyb20gJy4uL2NsYXNzZXMnO1xyXG5pbXBvcnQgeyBJUHJldHR5RmxvYXREaWdpdEdyb3VwUGFyYW0gfSBmcm9tICcuLi9pbnRlcmZhY2VzJztcclxuaW1wb3J0IHsgRkxPQVRfVVRJTCB9IGZyb20gJy4vX2Zsb2F0LnV0aWwnO1xyXG5pbXBvcnQgeyBESUdJVF9HUk9VUF9VVElMIH0gZnJvbSAnLi9fZGlnaXQtZ3JvdXAudXRpbCc7XHJcblxyXG5jb25zdCBzYW5pdGl6ZTpcclxuICAgIChzdWJqZWN0OiBUSW5wdXQsIGZsb2F0UG9pbnQ6IFRDdXN0b21DaGFyYWN0ZXIsIGRpZ2l0R3JvdXA/OiBJUHJldHR5RmxvYXREaWdpdEdyb3VwUGFyYW0sIGlzU2FmZVN1YmplY3Q/OiB0cnVlKVxyXG4gICAgICAgID0+IHN0cmluZ1xyXG4gICAgPSAoc3ViamVjdCwgcG9pbnQsIGRpZ2l0R3JvdXA/LCBpc1NhZmVTdWJqZWN0PykgPT4ge1xyXG4gIGNvbnN0IHZhbHVlID0gaXNTYWZlU3ViamVjdCA/IHN1YmplY3QgYXMgc3RyaW5nIDogRkxPQVRfVVRJTC5zYW5pdGl6ZShzdWJqZWN0LCBwb2ludCk7XHJcbiAgY29uc3Qgc2lnbiA9ICh2YWx1ZVswXSA9PT0gJy0nKSA/ICctJyA6ICcnO1xyXG4gIGNvbnN0IGludFBhcnQgPSBGTE9BVF9VVElMLmdldEludFBhcnQodmFsdWUsIHBvaW50LCB0cnVlKTtcclxuICBpZiAoIWludFBhcnQpXHJcbiAgICByZXR1cm4gJyc7XHJcbiAgY29uc3QgZGVjaW1hbHMgPSBGTE9BVF9VVElMLmdldERlY2ltYWxzKHZhbHVlLCBwb2ludCwgdHJ1ZSk7XHJcbiAgY29uc3QgcG9pbnRDaGFyID0gKGRlY2ltYWxzLmxlbmd0aCB8fCAodmFsdWVbdmFsdWUubGVuZ3RoIC0gMV0gPT09IHBvaW50KSkgPyBwb2ludCA6ICcnO1xyXG4gIHJldHVybiBkaWdpdEdyb3VwPy5oYXNEaWdpdEdyb3Vwc1xyXG4gICAgICA/IGAke3NpZ259JHtESUdJVF9HUk9VUF9VVElMLmFwcGx5KGludFBhcnRcclxuICAgICAgICAgICwgZGlnaXRHcm91cC5pbnRlZ2VyUGFydFxyXG4gICAgICAgICAgLCB0cnVlKX0ke3BvaW50Q2hhcn0ke0RJR0lUX0dST1VQX1VUSUwuYXBwbHkoZGVjaW1hbHMsIGRpZ2l0R3JvdXAuZGVjaW1hbFBhcnQsIHRydWUpfWBcclxuICAgICAgOiBgJHtzaWdufSR7aW50UGFydH0ke3BvaW50Q2hhcn0ke2RlY2ltYWxzfWA7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgUFJFVFRZX0ZMT0FUX1VUSUw6IHtcclxuICBzYW5pdGl6ZTpcclxuICAgICAgKHN1YmplY3Q6IFRJbnB1dCwgZmxvYXRQb2ludDogVEN1c3RvbUNoYXJhY3RlciwgZGlnaXRHcm91cD86IElQcmV0dHlGbG9hdERpZ2l0R3JvdXBQYXJhbSwgaXNTYWZlU3ViamVjdD86IHRydWUpXHJcbiAgICAgICAgICA9PiBzdHJpbmc7XHJcbiAgZmluZEZpcnN0Q2hhbmdlZEluZGV4OiAobmV3U3ViamVjdDogUHJldHR5RmxvYXQsIG9sZFN1YmplY3Q6IFByZXR0eUZsb2F0KSA9PiBudW1iZXI7XHJcbiAgZmluZEZpcnN0Q2hhbmdlZEluZGV4RnJvbUVuZDogKG5ld1N1YmplY3Q6IFByZXR0eUZsb2F0LCBvbGRTdWJqZWN0OiBQcmV0dHlGbG9hdCkgPT4gbnVtYmVyO1xyXG59ID0ge1xyXG5cclxuICBzYW5pdGl6ZTogKHN1YmplY3QsIHBvaW50LCBkaWdpdEdyb3VwPywgaXNTYWZlU3ViamVjdD8pID0+XHJcbiAgICAgIHNhbml0aXplKHN1YmplY3QsIHBvaW50LCBkaWdpdEdyb3VwLCBpc1NhZmVTdWJqZWN0KSxcclxuXHJcbiAgZmluZEZpcnN0Q2hhbmdlZEluZGV4OiAobmV3U3ViamVjdCwgb2xkU3ViamVjdCkgPT4ge1xyXG4gICAgY29uc3QgbmV3VmFsdWUgPSBuZXdTdWJqZWN0LnByZXR0eVZhbHVlO1xyXG4gICAgY29uc3Qgb2xkVmFsdWUgPSBvbGRTdWJqZWN0LnByZXR0eVZhbHVlO1xyXG4gICAgY29uc3QgZ3JvdXBEZWxpbWl0ZXJzID0gbmV3U3ViamVjdC5kaWdpdEdyb3VwRGVsaW1pdGVycztcclxuICAgIGxldCBpID0gMDtcclxuICAgIGxldCBqID0gMDtcclxuICAgIHdoaWxlICgoaSA8IG5ld1ZhbHVlLmxlbmd0aCkgJiYgKGogPCBvbGRWYWx1ZS5sZW5ndGgpKSB7XHJcbiAgICAgIGlmIChncm91cERlbGltaXRlcnMuaW5kZXhPZihuZXdWYWx1ZVtpXSkgPiAtMSkge1xyXG4gICAgICAgIGkrKztcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoZ3JvdXBEZWxpbWl0ZXJzLmluZGV4T2Yob2xkVmFsdWVbal0pID4gLTEpIHtcclxuICAgICAgICBqKys7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKG5ld1ZhbHVlW2ldICE9PSBvbGRWYWx1ZVtqXSlcclxuICAgICAgICByZXR1cm4gaTtcclxuICAgICAgaSsrO1xyXG4gICAgICBqKys7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3VmFsdWUubGVuZ3RoO1xyXG4gIH0sXHJcblxyXG4gIGZpbmRGaXJzdENoYW5nZWRJbmRleEZyb21FbmQ6IChuZXdTdWJqZWN0LCBvbGRTdWJqZWN0KSA9PiB7XHJcbiAgICBjb25zdCBuZXdWYWx1ZSA9IG5ld1N1YmplY3QucHJldHR5VmFsdWU7XHJcbiAgICBjb25zdCBvbGRWYWx1ZSA9IG9sZFN1YmplY3QucHJldHR5VmFsdWU7XHJcbiAgICBjb25zdCBncm91cERlbGltaXRlcnMgPSBuZXdTdWJqZWN0LmRpZ2l0R3JvdXBEZWxpbWl0ZXJzO1xyXG4gICAgbGV0IGkgPSBuZXdWYWx1ZS5sZW5ndGggLSAxO1xyXG4gICAgbGV0IGogPSBvbGRWYWx1ZS5sZW5ndGggLSAxO1xyXG4gICAgd2hpbGUgKChpID4gLTEpICYmIChqID4gLTEpKSB7XHJcbiAgICAgIGlmIChncm91cERlbGltaXRlcnMuaW5kZXhPZihuZXdWYWx1ZVtpXSkgPiAtMSkge1xyXG4gICAgICAgIGktLTtcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoZ3JvdXBEZWxpbWl0ZXJzLmluZGV4T2Yob2xkVmFsdWVbal0pID4gLTEpIHtcclxuICAgICAgICBqLS07XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKG5ld1ZhbHVlW2ldICE9PSBvbGRWYWx1ZVtqXSlcclxuICAgICAgICByZXR1cm4gaTtcclxuICAgICAgaS0tO1xyXG4gICAgICBqLS07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaTtcclxuICB9XHJcblxyXG59O1xyXG4iXX0=