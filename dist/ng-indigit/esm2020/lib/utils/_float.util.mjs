import { BASIC_UTIL } from './_basic.util';
import { NUMBER_UTIL } from './_number.util';
const deduplicateFloatPoint = (subject, point, isSafeSubject) => {
    const value = isSafeSubject ? subject : BASIC_UTIL.stringify(subject);
    const i = value.indexOf(point);
    return (i === value.lastIndexOf(point))
        ? value
        : value.substring(0, i) + point + value.substring(i + 1).replace(RegExp(point, 'g'), '');
};
const sanitize = (subject, point) => {
    let value = NUMBER_UTIL.faToEn(BASIC_UTIL.stringify(subject));
    if (!value)
        return '';
    let sign = '';
    if (value[0] === '-') {
        value = value.substring(1);
        sign = '-';
    }
    const regexp = RegExp(`[^\\d\\${point}]`, 'g');
    return deduplicateFloatPoint(`${sign}${value.replace(regexp, '')}`, point, true);
};
export const FLOAT_UTIL = {
    sanitize: (subject, point) => sanitize(subject, point),
    getIntPart: (subject, point, isSafeSubject) => {
        let value = isSafeSubject ? subject : sanitize(subject, point);
        if (value[0] === '-')
            value = value.substring(1);
        if (!value)
            return '';
        const i = value.indexOf(point);
        if (!i || (value === point))
            return '0';
        while ((value[0] === '0') && (value.length > 1))
            value = value.substring(1);
        return (i < 0) ? value : value.substring(0, i);
    },
    getDecimals: (subject, point, isSafeSubject) => {
        const value = isSafeSubject ? subject : sanitize(subject, point);
        const i = value.indexOf(point);
        return (i > -1) ? value.substring(i + 1) : '';
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2Zsb2F0LnV0aWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1pbmRpZ2l0L3NyYy9saWIvdXRpbHMvX2Zsb2F0LnV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFN0MsTUFBTSxxQkFBcUIsR0FDdkIsQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLGFBQWMsRUFBRSxFQUFFO0lBQ3JDLE1BQU0sS0FBSyxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUMsT0FBaUIsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNoRixNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQy9CLE9BQU8sQ0FBQyxDQUFDLEtBQUssS0FBSyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNyQyxDQUFDLENBQUMsS0FBSztRQUNQLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDN0YsQ0FBQyxDQUFDO0FBRUYsTUFBTSxRQUFRLEdBQThELENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxFQUFFO0lBQzdGLElBQUksS0FBSyxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQzlELElBQUksQ0FBQyxLQUFLO1FBQ1IsT0FBTyxFQUFFLENBQUM7SUFDWixJQUFJLElBQUksR0FBRyxFQUFFLENBQUM7SUFDZCxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUU7UUFDcEIsS0FBSyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0IsSUFBSSxHQUFHLEdBQUcsQ0FBQztLQUNaO0lBQ0QsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLFVBQVUsS0FBSyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDL0MsT0FBTyxxQkFBcUIsQ0FBQyxHQUFHLElBQUksR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNuRixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxVQUFVLEdBSW5CO0lBRUYsUUFBUSxFQUFFLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUM7SUFFdEQsVUFBVSxFQUFFLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxhQUFjLEVBQUUsRUFBRTtRQUM3QyxJQUFJLEtBQUssR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDLE9BQWlCLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDekUsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRztZQUNsQixLQUFLLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3QixJQUFJLENBQUMsS0FBSztZQUNSLE9BQU8sRUFBRSxDQUFDO1FBQ1osTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLEtBQUssQ0FBQztZQUN6QixPQUFPLEdBQUcsQ0FBQztRQUNiLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztZQUM3QyxLQUFLLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3QixPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRCxXQUFXLEVBQUUsQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLGFBQWMsRUFBRSxFQUFFO1FBQzlDLE1BQU0sS0FBSyxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUMsT0FBaUIsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMzRSxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQy9CLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUNoRCxDQUFDO0NBRUYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRDdXN0b21DaGFyYWN0ZXIsIFRJbnB1dCB9IGZyb20gJy4uL3R5cGVzJztcclxuaW1wb3J0IHsgQkFTSUNfVVRJTCB9IGZyb20gJy4vX2Jhc2ljLnV0aWwnO1xyXG5pbXBvcnQgeyBOVU1CRVJfVVRJTCB9IGZyb20gJy4vX251bWJlci51dGlsJztcclxuXHJcbmNvbnN0IGRlZHVwbGljYXRlRmxvYXRQb2ludDogKHN1YmplY3Q6IFRJbnB1dCwgZmxvYXRQb2ludDogVEN1c3RvbUNoYXJhY3RlciwgaXNTYWZlU3ViamVjdD86IHRydWUpID0+IHN0cmluZ1xyXG4gID0gKHN1YmplY3QsIHBvaW50LCBpc1NhZmVTdWJqZWN0PykgPT4ge1xyXG4gIGNvbnN0IHZhbHVlID0gaXNTYWZlU3ViamVjdCA/IHN1YmplY3QgYXMgc3RyaW5nIDogQkFTSUNfVVRJTC5zdHJpbmdpZnkoc3ViamVjdCk7XHJcbiAgY29uc3QgaSA9IHZhbHVlLmluZGV4T2YocG9pbnQpO1xyXG4gIHJldHVybiAoaSA9PT0gdmFsdWUubGFzdEluZGV4T2YocG9pbnQpKVxyXG4gICAgPyB2YWx1ZVxyXG4gICAgOiB2YWx1ZS5zdWJzdHJpbmcoMCwgaSkgKyBwb2ludCArIHZhbHVlLnN1YnN0cmluZyhpICsgMSkucmVwbGFjZShSZWdFeHAocG9pbnQsICdnJyksICcnKTtcclxufTtcclxuXHJcbmNvbnN0IHNhbml0aXplOiAoc3ViamVjdDogVElucHV0LCBmbG9hdFBvaW50OiBUQ3VzdG9tQ2hhcmFjdGVyKSA9PiBzdHJpbmcgPSAoc3ViamVjdCwgcG9pbnQpID0+IHtcclxuICBsZXQgdmFsdWUgPSBOVU1CRVJfVVRJTC5mYVRvRW4oQkFTSUNfVVRJTC5zdHJpbmdpZnkoc3ViamVjdCkpO1xyXG4gIGlmICghdmFsdWUpXHJcbiAgICByZXR1cm4gJyc7XHJcbiAgbGV0IHNpZ24gPSAnJztcclxuICBpZiAodmFsdWVbMF0gPT09ICctJykge1xyXG4gICAgdmFsdWUgPSB2YWx1ZS5zdWJzdHJpbmcoMSk7XHJcbiAgICBzaWduID0gJy0nO1xyXG4gIH1cclxuICBjb25zdCByZWdleHAgPSBSZWdFeHAoYFteXFxcXGRcXFxcJHtwb2ludH1dYCwgJ2cnKTtcclxuICByZXR1cm4gZGVkdXBsaWNhdGVGbG9hdFBvaW50KGAke3NpZ259JHt2YWx1ZS5yZXBsYWNlKHJlZ2V4cCwgJycpfWAsIHBvaW50LCB0cnVlKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBGTE9BVF9VVElMOiB7XHJcbiAgc2FuaXRpemU6IChzdWJqZWN0OiBUSW5wdXQsIGZsb2F0UG9pbnQ6IFRDdXN0b21DaGFyYWN0ZXIpID0+IHN0cmluZztcclxuICBnZXRJbnRQYXJ0OiAoc3ViamVjdDogVElucHV0LCBmbG9hdFBvaW50OiBUQ3VzdG9tQ2hhcmFjdGVyLCBpc1NhZmVTdWJqZWN0PzogdHJ1ZSkgPT4gc3RyaW5nO1xyXG4gIGdldERlY2ltYWxzOiAoc3ViamVjdDogVElucHV0LCBmbG9hdFBvaW50OiBUQ3VzdG9tQ2hhcmFjdGVyLCBpc1NhZmVTdWJqZWN0PzogdHJ1ZSkgPT4gc3RyaW5nO1xyXG59ID0ge1xyXG5cclxuICBzYW5pdGl6ZTogKHN1YmplY3QsIHBvaW50KSA9PiBzYW5pdGl6ZShzdWJqZWN0LCBwb2ludCksXHJcblxyXG4gIGdldEludFBhcnQ6IChzdWJqZWN0LCBwb2ludCwgaXNTYWZlU3ViamVjdD8pID0+IHtcclxuICAgIGxldCB2YWx1ZSA9IGlzU2FmZVN1YmplY3QgPyBzdWJqZWN0IGFzIHN0cmluZyA6IHNhbml0aXplKHN1YmplY3QsIHBvaW50KTtcclxuICAgIGlmICh2YWx1ZVswXSA9PT0gJy0nKVxyXG4gICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cmluZygxKTtcclxuICAgIGlmICghdmFsdWUpXHJcbiAgICAgIHJldHVybiAnJztcclxuICAgIGNvbnN0IGkgPSB2YWx1ZS5pbmRleE9mKHBvaW50KTtcclxuICAgIGlmICghaSB8fCAodmFsdWUgPT09IHBvaW50KSlcclxuICAgICAgcmV0dXJuICcwJztcclxuICAgIHdoaWxlICgodmFsdWVbMF0gPT09ICcwJykgJiYgKHZhbHVlLmxlbmd0aCA+IDEpKVxyXG4gICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cmluZygxKTtcclxuICAgIHJldHVybiAoaSA8IDApID8gdmFsdWUgOiB2YWx1ZS5zdWJzdHJpbmcoMCwgaSk7XHJcbiAgfSxcclxuXHJcbiAgZ2V0RGVjaW1hbHM6IChzdWJqZWN0LCBwb2ludCwgaXNTYWZlU3ViamVjdD8pID0+IHtcclxuICAgIGNvbnN0IHZhbHVlID0gaXNTYWZlU3ViamVjdCA/IHN1YmplY3QgYXMgc3RyaW5nIDogc2FuaXRpemUoc3ViamVjdCwgcG9pbnQpO1xyXG4gICAgY29uc3QgaSA9IHZhbHVlLmluZGV4T2YocG9pbnQpO1xyXG4gICAgcmV0dXJuIChpID4gLTEpID8gdmFsdWUuc3Vic3RyaW5nKGkgKyAxKSA6ICcnO1xyXG4gIH1cclxuXHJcbn07XHJcbiJdfQ==